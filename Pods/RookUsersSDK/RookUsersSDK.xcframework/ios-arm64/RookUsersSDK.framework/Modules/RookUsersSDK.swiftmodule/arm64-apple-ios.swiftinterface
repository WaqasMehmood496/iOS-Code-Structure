// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7 (swiftlang-5.7.0.127.4 clang-1400.0.29.50)
// swift-module-flags: -target arm64-apple-ios13.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name RookUsersSDK
// swift-module-flags-ignorable: -enable-bare-slash-regex
import Foundation
@_exported import RookUsersSDK
import Swift
import _Concurrency
import _StringProcessing
public struct JSONParameterEncoder : RookUsersSDK.ParameterEncoder {
  public static func encode(urlRequest: inout Foundation.URLRequest, with parameters: RookUsersSDK.Parameters) throws
}
public struct URLParameterEncoder : RookUsersSDK.ParameterEncoder {
  public static func encode(urlRequest: inout Foundation.URLRequest, with parameters: RookUsersSDK.Parameters) throws
}
final public class RookUsersManger {
  public init()
  final public func registerRookUser(with id: Swift.String, completion: @escaping (Swift.Result<Swift.Bool, Swift.Error>) -> Swift.Void)
  final public func getUserIdStored(completion: @escaping (Swift.Result<Swift.String, Swift.Error>) -> Swift.Void)
  final public func removeUser(compeltion: @escaping (Swift.Result<Swift.Bool, Swift.Error>) -> Swift.Void)
  @objc deinit
}
public typealias Parameters = [Swift.String : Any]
public protocol ParameterEncoder {
  static func encode(urlRequest: inout Foundation.URLRequest, with parameters: RookUsersSDK.Parameters) throws
}
public enum NetworkError : Swift.String, Swift.Error {
  case parametersNil
  case encodingFailed
  case missingUrl
  case noData
  case NotAuthorizedError
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
extension RookUsersSDK.NetworkError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
public enum NetworkResponse : Swift.String {
  case succes
  case authenticationError
  case badRequest
  case outdated
  case failed
  case noData
  case unableToDecode
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@_hasMissingDesignatedInitializers final public class RookUsersConfiguration {
  public static let shared: RookUsersSDK.RookUsersConfiguration
  final public func setConfiguration(clientUUID: Swift.String, secretKey: Swift.String)
  final public func setEnvironment(_ environment: RookUsersSDK.RookUsersEnvironment)
  final public func initRookUsers(completion: @escaping (Swift.Result<Swift.Bool, Swift.Error>) -> Swift.Void)
  @objc deinit
}
public typealias HTTPHeaders = [Swift.String : Swift.String]
public enum HTTPTask {
  case request
  case requestParameters(bodyParameters: RookUsersSDK.Parameters?, urlParameters: RookUsersSDK.Parameters?)
  case requestParametersAndHeaders(bodyParameters: RookUsersSDK.Parameters?, urlParameters: RookUsersSDK.Parameters?, additionalHeaders: RookUsersSDK.HTTPHeaders?)
}
public enum HTTPMethod : Swift.String {
  case get
  case post
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum RookUsersEnvironment {
  case sandbox
  case production
  public static func == (a: RookUsersSDK.RookUsersEnvironment, b: RookUsersSDK.RookUsersEnvironment) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public typealias NetworkRouterCompletion = (_ data: Foundation.Data?, _ response: Foundation.URLResponse?, _ error: Swift.Error?) -> Swift.Void
extension RookUsersSDK.NetworkError : Swift.Equatable {}
extension RookUsersSDK.NetworkError : Swift.Hashable {}
extension RookUsersSDK.NetworkError : Swift.RawRepresentable {}
extension RookUsersSDK.NetworkResponse : Swift.Equatable {}
extension RookUsersSDK.NetworkResponse : Swift.Hashable {}
extension RookUsersSDK.NetworkResponse : Swift.RawRepresentable {}
extension RookUsersSDK.HTTPMethod : Swift.Equatable {}
extension RookUsersSDK.HTTPMethod : Swift.Hashable {}
extension RookUsersSDK.HTTPMethod : Swift.RawRepresentable {}
extension RookUsersSDK.RookUsersEnvironment : Swift.Equatable {}
extension RookUsersSDK.RookUsersEnvironment : Swift.Hashable {}
